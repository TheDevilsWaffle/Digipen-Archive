/*//////////////////////////////////////////////////////////////////////////////////////////////////////////
//FILE-Z_UI_Transitions.z
//AUTHOR-Travis Moore
//COURSE-GAM240
//COPYRIGHT-© 2014 DigiPen, All Rights Reserved.
//////////////////////////////////////////////////////////////////////////////////////////////////////////*/
class Z_UI_Transitions:ZilchComponent
{
    //PROPERTIES
    
    //FADE
    [Property]
    var FadeInTime:Real = 0.5;
    [Property]
    var FadeOutTime:Real = 0.25;
    [Property]
    var WaitTime:Real = 2.0;
    
    //SCALE
    [Property]
    var ScaleOutTime:Real = 0.2;
    [Property]
    var ScaleInTime:Real = 0.25;
    [Property]
    var ScaleBiggerSize:Real = 1.1;
    
    //EASE
    [Property]
    var EaseType:Ease = Ease.QuadInOut;
    
    //non-settables
    var StartingPosition:Real3 = Real3();
    var StartingScale:Real3 = Real3();
    var OriginalAreaSize:Real2 = Real2();
    
    /*//////////////////////////////////////////////////////////////////////////////////////////////////////
    //FUNCTION-Initialize
    //EXPLANATION-Initialize variables/functions so that we can use them
    //////////////////////////////////////////////////////////////////////////////////////////////////////*/
    function Initialize(init:CogInitializer):Void
    {
        //find out what background this is
        this.DetermineFadeInType();
        
        //get area attributes
        if(this.Owner.Area != null)
        {
            this.OriginalAreaSize = this.Owner.Area.Size;
        }
    }
    
    /*//////////////////////////////////////////////////////////////////////////////////////////////////////
    //FUNCTION-DetermineFadeInType
    //EXPLANATION-what kind of background are we fading in and out?
    //////////////////////////////////////////////////////////////////////////////////////////////////////*/
    function DetermineFadeInType():Void
    {
        //determine which screen this is
        if(this.Owner.Name == "bg-back")
        {
            //fade in from black
            this.FadeInFromBlack();
            this.StartingPosition = Real3(0,0,9);
            //apply starting position
            this.Owner.Transform.Translation = this.StartingPosition;
        }
        if(this.Owner.Name == "bg-white")
        {
            //fade in from white
            this.FadeInFromWhite();
            this.StartingPosition = Real3(0,0,9);
            //apply starting position
            this.Owner.Transform.Translation = this.StartingPosition;
        }
        if(this.Owner.Name == "bg-red")
        {
            //fade in from white
            this.FadeInFromWhite();
            //set starting position
            this.StartingPosition = Real3(0,0,9);
            //apply starting position
            this.Owner.Transform.Translation = this.StartingPosition;
        }
        
        //special screen case
        if(this.Owner.Name == "scn-splash-teamLogo")
        {
            //set starting position
            this.StartingPosition = Real3(0,0,1);
            //apply starting position
            this.Owner.Transform.Translation = this.StartingPosition;
            //scale Out
            this.ScaleOut();
        }
    }
    
    /*//////////////////////////////////////////////////////////////////////////////////////////////////////
    //FUNCTION-FadeInScaleUp
    //EXPLANATION-Scale a little bigger, baby
    //////////////////////////////////////////////////////////////////////////////////////////////////////*/
    function FadeInScaleUp():Void
    {
        //create action sequence
        var aFadeInScaleUp = Action.Group(this.Owner.Actions);
        
        //be invisible
        Action.Property(aFadeInScaleUp,
                        @this.Owner.Sprite.Color,
                        Real4(1,1,1,0.0),
                        0.01,
                        this.EaseType);
        
        //be visible
        Action.Property(aFadeInScaleUp,
                        @this.Owner.Sprite.Color,
                        Real4(1,1,1,1.0),
                        0.01,
                        this.EaseType);
        
        //scale a little bitter
        Action.Property(aFadeInScaleUp,
                        @this.Owner.Area.Size,
                        Real2(this.Owner.Area.Size.X * this.ScaleBiggerSize, this.Owner.Area.Size.Y * this.ScaleBiggerSize),
                        this.ScaleInTime,
                        this.EaseType);
    }
    
    
    /*//////////////////////////////////////////////////////////////////////////////////////////////////////
    //FUNCTION-ScaleNormal
    //EXPLANATION-Scale back to normal
    //////////////////////////////////////////////////////////////////////////////////////////////////////*/
    function ScaleNormal():Void
    {
        //create action sequence
        var aScaleNormal = Action.Sequence(this.Owner.Actions);
        
        //scale back down
        Action.Property(aScaleNormal,
                        @this.Owner.Area.Size,
                        Real2(this.OriginalAreaSize.X, this.OriginalAreaSize.Y),
                        this.ScaleInTime,
                        this.EaseType);
    }
    /*//////////////////////////////////////////////////////////////////////////////////////////////////////
    //FUNCTION-ScaleOut
    //EXPLANATION-Scale the Screen in from big to small
    //////////////////////////////////////////////////////////////////////////////////////////////////////*/
    function ScaleOut():Void
    {
        //create action sequence
        var aScaleOut = Action.Sequence(this.Owner.Actions);
        
        //scale smallest
        Action.Property(aScaleOut,
                        @this.Owner.Area.Size,
                        Real2(44.0,26.5),
                        this.ScaleOutTime,
                        this.EaseType);
    }
    
    /*//////////////////////////////////////////////////////////////////////////////////////////////////////
    //FUNCTION-FadeOutToMainMenu
    //EXPLANATION-Transparency 0.0 -> 1.0, Load Menu
    //////////////////////////////////////////////////////////////////////////////////////////////////////*/
    function FadeOutTo(levelToLoad_:String):Void
    {
        //create action sequence
        var aFadeOutToWhite = Action.Sequence(this.Owner.Actions);
        
        //fade in
        Action.Property(aFadeOutToWhite,
                        @this.Owner.Sprite.Color,
                        Real4(1,1,1,1.0),
                        this.FadeInTime,
                        Ease.Linear);
        
        if(levelToLoad_ == "MainMenu")
        {
            //load main menu
            Action.Call(aFadeOutToWhite, this.LevelSettings.Z_LevelLogic.LoadMainMenu);
        }
        if(levelToLoad_ == "Controls")
        {
            //load main menu
            Action.Call(aFadeOutToWhite, this.LevelSettings.Z_LevelLogic.LoadControls);
        }
        if(levelToLoad_ == "Options")
        {
            //load main menu
            Action.Call(aFadeOutToWhite, this.LevelSettings.Z_LevelLogic.LoadOptions);
        }
        if(levelToLoad_ == "Credits")
        {
            //load main menu
            Action.Call(aFadeOutToWhite, this.LevelSettings.Z_LevelLogic.LoadCredits);
        }
    }
    
    /*//////////////////////////////////////////////////////////////////////////////////////////////////////
    //FUNCTION-FadeInFromWhite
    //EXPLANATION-Transparency 1.0 -> 0.0
    //////////////////////////////////////////////////////////////////////////////////////////////////////*/
    function FadeInFromWhite():Void
    {
        //create action sequence
        var aFadeInFromWhite = Action.Sequence(this.Owner.Actions);
        
        //wait a bit before coming in
        Action.Delay(aFadeInFromWhite, 0.5);
        
        //fade in
        Action.Property(aFadeInFromWhite,
                        @this.Owner.Sprite.Color,
                        Real4(1,1,1,0.0),
                        this.FadeInTime,
                        Ease.Linear);
                        
    }
    
    /*//////////////////////////////////////////////////////////////////////////////////////////////////////
    //FUNCTION-FadeInFromBlack
    //EXPLANATION-Transparency 1.0 -> 0.0
    //////////////////////////////////////////////////////////////////////////////////////////////////////*/
    function FadeInFromBlack():Void
    {
        //create action sequence
        var aFadeInFromBlack = Action.Sequence(this.Owner.Actions);
        
        //fade in
        Action.Property(aFadeInFromBlack,
                        @this.Owner.Sprite.Color,
                        Real4(0.1,0.1,0.1,0.0),
                        this.FadeInTime,
                        Ease.Linear);
        //wait for it
        Action.Delay(aFadeInFromBlack, this.WaitTime);
        
        //fade out
        Action.Property(aFadeInFromBlack,
                        @this.Owner.Sprite.Color,
                        Real4(0.1,0.1,0.1,1.0),
                        this.FadeOutTime,
                        Ease.Linear);
    }
}
