/*//////////////////////////////////////////////////////////////////////////////////////////////////////////
//AUTHOR-Travis Moore
//COURSE-GAT240F14
//INSTRUCTOR-Chris Peters
//COPYRIGHT-© 2014 DigiPen, All Rights Reserved.
//////////////////////////////////////////////////////////////////////////////////////////////////////////*/
class Z_Invulnerability : ZilchComponent
{
    [Property]
    var InvulnerabilityTimer:Real = 4;
    
    var ResetTimer:Real = 0;
    var LeftFrontGun:Cog = null;
    var RightFrontGun:Cog = null;
    var SpecialGun:Cog = null;
    
    /*//////////////////////////////////////////////////////////////////////////////////////////////////////
    //FUNCTION-Initialize
    //EXPLANATION-Generate the amount of enemies to use for the game
    //////////////////////////////////////////////////////////////////////////////////////////////////////*/
    function Initialize(init : CogInitializer)
    {
        //used to reset the InvulnerabilityTimer
        this.ResetTimer = this.InvulnerabilityTimer;
        
        this.LeftFrontGun = this.Space.FindObjectByName("GunBarrel_Left");
        this.RightFrontGun = this.Space.FindObjectByName("GunBarrel_Right");
        this.SpecialGun = this.Space.FindObjectByName("SpecialGun");
    }

    /*//////////////////////////////////////////////////////////////////////////////////////////////////////
    //FUNCTION-BriefInvulnerability
    //EXPLANATION-Make the ship unable to be hit/flash for a short tiem
    //////////////////////////////////////////////////////////////////////////////////////////////////////*/
    function BriefInvulnerability()
    {
        for(this.InvulnerabilityTimer; this.InvulnerabilityTimer > 0; --this.InvulnerabilityTimer)
        {
            //flash the player sprite a few times 
            var flashing = Action.Sequence(this.Owner.Actions);
            //PLAYER
            //go invis
            Action.Property(flashing,
                            @this.Owner.Sprite.Color,
                            Real4(1,1,1,0.0),
                            0.5,
                            Ease.QuadInOut);
            //no more invis
            Action.Property(flashing,
                            @this.Owner.Sprite.Color,
                            Real4(1,1,1,1.0),
                            0.5,
                            Ease.QuadInOut);
            //Left Gun
            //go invis
            Action.Property(flashing,
                            @this.LeftFrontGun.Sprite.Color,
                            Real4(1,1,1,0.0),
                            0.5,
                            Ease.QuadInOut);
            //no more invis
            Action.Property(flashing,
                            @this.LeftFrontGun.Sprite.Color,
                            Real4(1,1,1,1.0),
                            0.5,
                            Ease.QuadInOut);
                            
            //Right Gun
            //go invis
            Action.Property(flashing,
                            @this.RightFrontGun.Sprite.Color,
                            Real4(1,1,1,0.0),
                            0.5,
                            Ease.QuadInOut);
            //no more invis
            Action.Property(flashing,
                            @this.RightFrontGun.Sprite.Color,
                            Real4(1,1,1,1.0),
                            0.5,
                            Ease.QuadInOut);
                            
            //Special Gun
            //go invis
            Action.Property(flashing,
                            @this.SpecialGun.Sprite.Color,
                            Real4(1,1,1,0.0),
                            0.5,
                            Ease.QuadInOut);
            //no more invis
            Action.Property(flashing,
                            @this.SpecialGun.Sprite.Color,
                            Real4(1,1,1,1.0),
                            0.5,
                            Ease.QuadInOut);
            
            //make sure player is invulerable
            var invulerable = Action.Group(this.Owner.Actions);
            //go invis
            Action.Property(invulerable,
                            @this.Owner.SphereCollider.Ghost,
                            true,
                            this.InvulnerabilityTimer,
                            Ease.QuadInOut);
            Action.Property(invulerable,
                            @this.Owner.SphereCollider.Ghost,
                            false,
                            0.5,
                            Ease.QuadInOut);
        }
        this.InvulnerabilityTimer = this.ResetTimer;
    }
}
