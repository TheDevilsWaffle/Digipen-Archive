/*//////////////////////////////////////////////////////////////////////////////////////////////////////////
//SCRIPT    - Z_BouncePad.z
//AUTHOR    - Travis Moore
//COURSE    - GAM250
//COPYRIGHT - ©2015 DigiPen, All Rights Reserved.
//////////////////////////////////////////////////////////////////////////////////////////////////////////*/
class Z_BouncePad:ZilchComponent
{
    //PLAYERS
    var Player1:Cog = null;
    var Player2:Cog = null;
    
    //BOUNCE
    [Property]
    var BounceForce:Real = 2.5;                 //how much bounce
    [Property]
    var BounceDirection:Real3 = Real3(0,1,0);   //currently set to launch up
    [Property]
    var BouncePadScale:Real3 = Real3();
    [Property]
    var IsActive:Boolean = Boolean(false);
    
    /*//////////////////////////////////////////////////////////////////////////////////////////////////////
    //FUNCTION-Initialize
    //EXPLANATION-Initialize variables and event listeners
    //////////////////////////////////////////////////////////////////////////////////////////////////////*/
    function Initialize(init:CogInitializer):Void
    {
        this.BouncePadScale = this.Owner.Transform.Scale;
        //set player objects
        this.Player1 = this.Space.FindObjectByName("goPlayer1");
        this.Player2 = this.Space.FindObjectByName("goPlayer2");
        
        //collision event listener
        Zero.Connect(this.Owner, Events.CollisionStarted, this.OnCollisionStarted);
    }
    
    /*//////////////////////////////////////////////////////////////////////////////////////////////////////
    //FUNCTION-OnCollisionStarted
    //EXPLANATION-perform bounce on object that can bounce
    //////////////////////////////////////////////////////////////////////////////////////////////////////*/
    function OnCollisionStarted(event:CollisionEvent):Void
    {
        //if active
        if(this.IsActive)
        {
            //make sure it affects only the target
            if(event.OtherObject == this.Player1 || event.OtherObject == this.Player2)
            {
                //DEBUG--Player is Bouncing
                //Console("`event.OtherObject` is BOUNCING");
                
                //perform jump
                event.OtherObject.SweptController.JumpDirectionally(this.BounceDirection * this.BounceForce);
                
                this.AnimateBounce();
            }
        }
    }
    
    /*//////////////////////////////////////////////////////////////////////////////////////////////////////
    //FUNCTION-AnimateBounce()
    //EXPLANATION-animate and bounce the player
    //////////////////////////////////////////////////////////////////////////////////////////////////////*/
    function AnimateBounce():Void
    {
        //create action sequence
        var aBounce = Action.Sequence(this.Owner.Actions);
        
        //scale up slightly
        Action.Property(aBounce,
                        @this.Owner.Transform.Scale,
                        Real3(this.BouncePadScale.X + 0.1, 
                              this.BouncePadScale.Y + 0.25, 
                              this.BouncePadScale.Z),
                        0.1,
                        Ease.QuadInOut);
        
        //scale back slightly
        Action.Property(aBounce,
                        @this.Owner.Transform.Scale,
                        Real3(this.BouncePadScale.X - 0.1, 
                              this.BouncePadScale.Y - 0.25, 
                              this.BouncePadScale.Z),
                        0.1,
                        Ease.QuadInOut);
        
        //normal
        Action.Property(aBounce,
                        @this.Owner.Transform.Scale,
                        Real3(this.BouncePadScale.X, 
                              this.BouncePadScale.Y, 
                              this.BouncePadScale.Z),
                        0.2,
                        Ease.QuadInOut);
    }
}
