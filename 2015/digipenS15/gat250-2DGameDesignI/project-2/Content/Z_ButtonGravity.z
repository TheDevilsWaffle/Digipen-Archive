/*//////////////////////////////////////////////////////////////////////////////////////////////////////////
//SCRIPT    - Z_ButtonGravity.z
//AUTHOR    - Travis Moore
//COURSE    - GAM250
//COPYRIGHT - ©2015 DigiPen, All Rights Reserved.
//////////////////////////////////////////////////////////////////////////////////////////////////////////*/
class Z_ButtonGravity:ZilchComponent
{
    //BUTTON TARGET
    [Property]
    var GravityStrength:Real = Real(40.0);
    [Property]
    var GravityChangeTime:Real = Real(1.00);
    var GravityZone:Cog = null;
    var GravityZonePos:Real3 = Real3();
    var GravityZoneActiveSprite:SpriteSource = null;
    var GravityZoneInactiveSprite:SpriteSource = null;
    
    //BUTTON
    var Button:Cog = null;
    var ButtonPos:Real3 = Real3();
    var ButtonScale:Real3 = Real3();
    
    //ANIMATION
    [Property]
    var ButtonDown:Real = Real(0.1);
    var ButtonTime:Real = Real(0.25);
    
    //PLAYERS
    var Player1:Cog = null;
    var Player2:Cog = null;
    
    //BUTTON PRESSER (if needed)
    var ButtonPresserObject:CogPath = null;
    var ButtonPresser:Cog = null;
    
    //STATE
    var IsPressed:Boolean = Boolean(false);
    
    function Initialize(init:CogInitializer):Void
    {
        //find the button
        this.Button = this.Owner.Parent;
        this.ButtonPos = this.Button.Transform.Translation;
        this.ButtonScale = this.Button.Transform.Scale;
        
        //set player objects
        this.Player1 = this.Space.FindObjectByName("goPlayer1");
        this.Player2 = this.Space.FindObjectByName("goPlayer2");
        
        //get the object that this button controls
        if(this.Owner.Parent.Z_ButtonType.ButtonControlledObject != null)
        {
            this.GravityZone = this.Owner.Parent.Z_ButtonType.ButtonControlledObject.Cog;
            this.GravityZonePos = this.GravityZone.Transform.Translation;
        }
        
        //get the inactive/active sprites ready
        this.GravityZoneActiveSprite = SpriteSource.Find("sprGravityZoneActive");
        this.GravityZoneInactiveSprite = SpriteSource.Find("sprGravityZoneInactive");
        
        if(this.ButtonPresserObject != null)
        {
            this.ButtonPresser = this.ButtonPresserObject.Cog;
        }
        
        //collision listeners
        Zero.Connect(this.Owner, Events.CollisionStarted, this.OnCollisionStarted);
        Zero.Connect(this.Owner, Events.CollisionPersisted, this.OnCollisionPersisted);
        Zero.Connect(this.Owner, Events.CollisionEnded, this.OnCollisionEnded);
    }
    
    /*//////////////////////////////////////////////////////////////////////////////////////////////////////
    //FUNCTION-OnCollisionStarted()
    //EXPLANATION-
    //////////////////////////////////////////////////////////////////////////////////////////////////////*/
    function OnCollisionStarted(event:CollisionEvent):Void
    {
        //if not already pressed
        if(!this.IsPressed)
        {
            //ensure who touched the button
            if(event.OtherObject == this.Player1 || event.OtherObject == this.Player2 || event.OtherObject == this.ButtonPresser)
            {
                //DEBUG
                //Console.WriteLine("`event.OtherObject` hit the button!");
                
                //set IsPressed to true (prevent looping)
                this.IsPressed = true;
                
                //call function to animate button being pressed
                this.Owner.Parent.Z_ButtonType.AnimateButtonPressed();
                //swap out the sprite
                this.GravityZone.Sprite.SpriteSource = this.GravityZoneActiveSprite;
                //turn gravity zone on
                this.GravityZone.Z_GravityZone.IsActive = true;
            }
        }
    }
    
    /*//////////////////////////////////////////////////////////////////////////////////////////////////////
    //FUNCTION-OnCollisionPersisted()
    //EXPLANATION-
    //////////////////////////////////////////////////////////////////////////////////////////////////////*/
    function OnCollisionPersisted(event:CollisionEvent):Void
    {
        //if not already pressed
        if(!this.IsPressed)
        {
            //ensure who touched the button
            if(event.OtherObject == this.Player1 || event.OtherObject == this.Player2 || event.OtherObject == this.ButtonPresser)
            {
                //DEBUG
                //Console.WriteLine("`event.OtherObject` ALREADY hit the button!");
                
                //set IsPressed to true (prevent looping)
                this.IsPressed = true;
                
                //call function to animate button being pressed
                this.Owner.Parent.Z_ButtonType.AnimateButtonPressed();
                //swap out the sprite
                this.GravityZone.Sprite.SpriteSource = this.GravityZoneActiveSprite;
                //turn gravity zone on
                this.GravityZone.Z_GravityZone.IsActive = true;
            }
        }
    }
    
    /*//////////////////////////////////////////////////////////////////////////////////////////////////////
    //FUNCTION-OnCollisionEnded()
    //EXPLANATION-
    //////////////////////////////////////////////////////////////////////////////////////////////////////*/
    function OnCollisionEnded(event:CollisionEvent):Void
    {
        //reset IsPressedBoolean
        this.IsPressed = false;
        
        //call function to animate button being depressed
        this.Owner.Parent.Z_ButtonType.AnimateButtonDepressed();
        //call function to slam the gate closed
        
        this.GravityZone.Z_GravityZone.IsActive = false;
        //swap out the sprite
        this.GravityZone.Sprite.SpriteSource = this.GravityZoneInactiveSprite;
    }
    
    /*//////////////////////////////////////////////////////////////////////////////////////////////////////
    //FUNCTION-AnimateGravityChange()
    //EXPLANATION-toggle's the gravity change in a zone
    //////////////////////////////////////////////////////////////////////////////////////////////////////*/
    function AnimateGravityChange(gate_:Cog):Void
    {
        if(this.IsPressed)
        {
            //create action sequence
            var aGravityChange = Action.Group(this.Owner.Actions);
            
            this.GravityZone.Z_GravityZone.IsActive = true;
            //open up
            //Action.Property(aGateOpen,
            //                @gate_.Transform.Translation,
            //                Real3(this.GatePos.X, 
            //                      this.GatePos.Y + this.GateOpenSize, 
            //                      this.GatePos.Z),
            //                0.5,
            //                Ease.QuadInOut);
            
            //DEBUG
            //Console.WriteLine(gate_.Transform.Translation);
        }
    }
}
